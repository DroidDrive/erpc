{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#include "erpc_client_setup.h"


#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include "erpc_port.h"
#endif
#include "{$codecHeader}"
// extern "C"
//{
#include "{$commonHeaderName}.h"
{% if groupNames %}
// import callbacks declaration from other groups
{%  for name in groupNames if name != group.name %}
#include "{$outputFilename}_{$name}.h"
{%  endfor %}
{% endif %}
//}

{$checkVersion()}
{$>checkCrc()}
using namespace erpc;
using namespace std;

//extern ClientManager *g_client;

static RequestContext pendingRequest_;

{% for iface in group.interfaces %}
{%  for fn in iface.functions  %}
static {$fn.genericRetStruct}_t retObj{$fn.name} = { false {% if fn.ret != "void" %}, {} {% endif %}};
{%  endfor -- functions %}
{% endfor -- iface %}

{$generateCrcVariable()}
{$> setSharedMemAddresses()}
{% if unitTest %}
{$> callbackTable(functions)}
{% endif %}
{$> constantsDefinitions(consts)}
{$> symbolHeader(group.symbolsMap.symbolsToServer, "serial", "def")}
{$> symbolSource(group.symbolsMap.symbolsToServer, "serial", "def")}
{$> symbolHeader(group.symbolsMap.symbolsToClient, "deserial", "def")}
{$> symbolSource(group.symbolsMap.symbolsToClient, "deserial", "def")}
{$> symbolHeader(group.symbolsMap.symbolsToServer, "serial", "noSharedMem")}
{$> symbolSource(group.symbolsMap.symbolsToServer, "serial", "noSharedMem")}
{$> symbolHeader(group.symbolsMap.symbolsToClient, "deserial", "noSharedMem")}
{$> symbolSource(group.symbolsMap.symbolsToClient, "deserial", "noSharedMem")}
{% def clientShimCode(fn, serverIDName, functionIDName) ------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% set clientIndent = "" >%}
{% if generateErrorChecks %}
    erpc_status_t err = kErpcStatus_Success;
    retObj{$fn.name}.valid = false;

{% endif -- generateErrorChecks %}
{% if fn.returnValue.type.isNotVoid %}
#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = g_client->getPreCB();
    if (preCB){
        preCB();
    }
#endif
    {% if fn.returnValue.isNullReturnType %} 
        {$fn.returnValue.resultVariable} = &retObj{$fn.name}.value;
    {% else %}
        {$fn.returnValue.resultVariable};
    {% endif -- isNullReturnType %}
{% endif -- isNotVoid %}

    // do we want to restart the request?
    if(restartRequest){
        // Dispose of the request.
        g_client->releaseRequest(pendingRequest_);
    }

    // Get a new request.
    if(restartRequest || pendingRequest_.getState() == RequestContextState::INVALID){
{% if !fn.isReturnValue %}
        pendingRequest_ = g_client->createRequest(channel, true);
{% else %}
        pendingRequest_ = g_client->createRequest(channel, false);
{% endif -- isReturnValue %}
    }

    // Encode the request.
{% if codecClass == "Codec" %}
    {$codecClass} * codec = pendingRequest_.getCodec();
{% else %}
    {$codecClass} * codec = static_cast<{$codecClass} *>(pendingRequest_.getCodec());
{% endif %}

{% if generateAllocErrorChecks %}
{%  set clientIndent = "        " >%}
    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        if(pendingRequest_.getState() == RequestContextState::VALID){
{% endif -- generateErrorChecks %}
{$clientIndent}    codec->startWriteMessage({% if not fn.isReturnValue %}kOnewayMessage{% else %}kInvocationMessage{% endif %}, {$serverIDName}, {$functionIDName}, pendingRequest_.getSequence());

{% if fn.isSendValue %}
{%  for param in fn.parameters if (param.serializedDirection == "" || param.serializedDirection == OutDirection || param.referencedName != "") %}
{%   if param.isNullable %}
{$ addIndent(clientIndent & "    ", f_paramIsNullableEncode(param))}

{%   else -- isNullable %}
{%    if param.direction != OutDirection %}
{$addIndent(clientIndent & "    ", param.coderCall.encode(param.coderCall))}
{%    endif -- param != OutDirection %}
{%   endif -- isNullable %}
{%  endfor -- fn parameters %}
{% endif -- isSendValue %}
{%  set clientIndent = "    " >%}
{$clientIndent}    }

{$clientIndent}    // Send message to server
{$clientIndent}    // Codec status is checked inside this function.
{$clientIndent}    bool success = g_client->performRequest(pendingRequest_);
{$clientIndent}    err = codec->getStatus();
{$clientIndent}    if(success && pendingRequest_.getState() == RequestContextState::DONE)
{%  set clientIndent = "        " >%}
{$clientIndent}{

{% if fn.isReturnValue %}
{%  if fn.needTempVariableClient %}

{$clientIndent}    int32_t _tmp_local;
{%  endif %}
{%  for param in fn.parametersToClient if (param.serializedDirection == "" || param.serializedDirection == InDirection || param.referencedName != "") %}

{%   if param.isNullable %}
{$clientIndent}    if ({$param.nullableName} != NULL{% if ((source == "client") && (param.direction != ReturnDirection) && (empty(param.lengthName) == false)) %} && {$param.lengthName} != NULL{% endif %})
{$clientIndent}    {
{$addIndent(clientIndent & "        ", param.coderCall.decode(param.coderCall))}
        }
{%   else -- notNullable %}
{$addIndent(clientIndent & "    ", param.coderCall.decode(param.coderCall))}
{%   endif -- isNullable %}
{%  endfor -- fn parametersToClient %}
{%  if fn.returnValue.type.isNotVoid %}
{%   if fn.returnValue.isNullable %}
{$clientIndent}    bool isNull;
{$addIndent(clientIndent & "    ", f_paramIsNullableDecode(fn.returnValue))}
{%   else -- isNullable %}
/*
{$> addIndent(clientIndent & "    ", allocMem(fn.returnValue.firstAlloc))}
*/
{$addIndent(clientIndent & "    ", fn.returnValue.coderCall.decode(fn.returnValue.coderCall))}
{%   endif -- isNullable %}
{%  endif -- isNotVoid %}
{% endif -- isReturnValue %}
{% if generateErrorChecks %}
{$clientIndent}    err = codec->getStatus();
{% endif -- generateErrorChecks %}
{%    if generateAllocErrorChecks %}
        }
{% endif -- generateAllocErrorChecks %}
    }

    // cleanup if request is valid, not pending (either because of error or success)
    if(pendingRequest_.getState() == RequestContextState::DONE)
    {

        // Dispose of the request.
        g_client->releaseRequest(pendingRequest_);

{% if generateErrorChecks %}
        
        // Invoke error handler callback function
        g_client->callErrorHandler(err, {$functionIDName});
{% endif -- generateErrorChecks %}
{% if generateErrorChecks && fn.returnValue.type.isNotVoid %}

#if ERPC_PRE_POST_ACTION
        pre_post_action_cb postCB = g_client->getPostCB();
        if (postCB)
        {
            postCB();
        }
#endif

{%  if empty(fn.returnValue.errorReturnValue) == false && fn.returnValue.isNullReturnType == false %}
        retObj{$fn.name}.value = {$fn.returnValue.name};
        if (err != kErpcStatus_Success){
            retObj{$fn.name}.value = {$fn.returnValue.errorReturnValue};
        }
{%  endif %}
{% else %}
{% endif -- generateErrorChecks %}
        retObj{$fn.name}.valid = true;
        pendingRequest_.setState(RequestContextState::INVALID);
    }

    //return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
    return retObj{$fn.name};
{% enddef --------------------------------------------------------------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% for callbackType in group.callbacks %}
// Common function for serializing and deserializing callback functions of same type.
static {$callbackType.prototype};

{% endfor %}
{% for callbackType in group.callbacks %}

// Common function for serializing and deserializing callback functions of same type.
static {$callbackType.prototype}
{
{$ clientShimCode(callbackType, "serviceID", "functionID") >}
}

{% endfor %}
{% for iface in group.interfaces %}
{%  for fn in iface.functions %}

// {$iface.name} interface {$fn.name} function client shim.
{$fn.prototype2WithNamespace}
{
    /// kikass: auto inserted (braned) hash id (channel) reference for this function
    /// this channel id is forwareded to the transport layer as well, so that
    /// it can be used there for message arbitration on buses if necessary
    const Hash channel{k{$iface.name}_{$fn.name}_id};

{%   if fn.isCallback %}
    {% if fn.returnValue.type.isNotVoid %}return {% endif %}{$fn.callbackFName}(k{$iface.name}_service_id, k{$iface.name}_{$fn.name}_id{% for param in fn.parameters %}, {$param.name}{% endfor %});
{%   else -- fn.isCallback >%}
{$ clientShimCode(fn, "k"& iface.name & "_service_id", "k" & iface.name & "_" & fn.name & "_id") >}
{%   endif -- fn.isCallback >%}
}

// Wrapper for shim function which converts a client id to a g client
{$fn.prototypeWithIdAndNs}{
    ClientManager* g_client = g_clients[id];
    return {$fn.prototypeCallWithClient};
}

{%  endfor -- fn %}
{% endfor -- iface %}
