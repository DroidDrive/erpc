{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#include <array>
#include "erpc_client_setup.h"

using namespace erpc;

#if !defined({$commonGuardMacro})
#define {$commonGuardMacro}
{% if usedUnionType %}

#if defined(__CC_ARM) || defined(__ARMCC_VERSION)
#pragma anon_unions
#endif
{% endif -- usedUnionType %}

{% if not commonTypesFile == "" %}
// Common types header file
#include "{$commonTypesFile}"
{% else %}
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "erpc_version.h"
{% if empty(crc16) == false %}
#include "erpc_crc16.h"
{% endif  -- empty(crc16) == false %}
{% for inc in includes %}
#include "{$inc}"
{% endfor -- includes %}

{$checkVersion()}
{$>checkCrc()}
{% endif -- not commonTypesFile %}
{% if commonTypesFile == "" %}
//#if !defined(ERPC_TYPE_DEFINITIONS)
//#define ERPC_TYPE_DEFINITIONS
{% if not empty(enums) %}

// Enumerators data types declarations
{%  for enum in enums %}
{% if enum.name != "" %}
{% endif %}
{$> enum.mlComment}
{%   if enum.name %}{% endif --enum.name  %}enum class {$addIndent(" ", enum.name)} : uint8_t
{
{%   for enumMember in enum.members %}
{$> addIndent("    ", enumMember.mlComment)}
    {$enumMember.memberDeclaration}{$enumMember.ilComment}
{%   endfor -- enumsMembers %}
};
{%  endfor -- enums %}
{% endif -- enums %}

{% if not empty(aliases) %}

// Aliases data types declarations
{%  for alias in aliases %}
{$> alias.mlComment}
{%   if alias.typenameName == "" %}
typedef {$alias.unnamedType}
{
{%    for mem in alias.unnamed.members %}
    {$mem.memberDeclaration}
{%    endfor -- alias.unnamed.members %}
} {$alias.unnamedName};
{%   else -- alias.typenameName %}
typedef {$alias.typenameName};{$alias.ilComment}
{%   endif -- alias.typenameName %}
{%  endfor -- aliases %}
{% endif -- aliases %}
{% if nonExternalStructUnion %}

// Structures/unions data types declarations
{%  for us in symbols %}
{%   if !us.isExternal %}
{%    if us.type == "struct" %}
{$> us.mlComment}
struct {$us.name}
{
{%     for mem in us.members %}
{$> addIndent("    ", mem.mlComment)}
    {$mem.memberDeclaration}{$mem.ilComment}
{$> addIndent("    ", mem.elementsCount)}
{%     endfor %}
};{$us.ilComment}{$loop.addNewLineIfNotLast}
{%    else -- us.type == "union" %}
{$> us.mlComment}
union {$us.name}
{
{$ addIndent("    ", unionMembersDeclaration(us))}
};{$us.ilComment}{$loop.addNewLineIfNotLast}
{%    endif -- us.type == "union/struct" %}
{%   endif -- !us.isExternal %}
{%  endfor -- symbols %}

{% endif -- nonExternalStruct || nonExternalUnion %}
{% if not empty(consts) %}

// Constant variable declarations
{%  for c in consts %}
{$> c.mlComment}
extern const {$c.typeAndName};{$c.ilComment}{$loop.addNewLineIfNotLast}
{%  endfor -- consts %}
{% endif -- consts %}

//#endif // ERPC_TYPE_DEFINITIONS
{% endif -- commonTypesFile %}

{% for iface in group.interfaces %}
{%  for fn in iface.functions  %}
typedef struct {$fn.genericRetStruct}{
    bool valid = false;
    {% if fn.ret != "void" %} {$fn.ret} value; {% endif %}
} {$fn.genericRetStruct}_t;
{%  endfor -- functions %}
{% endfor -- iface %}

{% if not genCommonTypesFile %}
{% for iface in group.interfaces %}
/*! @brief {$iface.name} identifiers */
static constexpr uint8_t k{$iface.name}_service_id = {$iface.id};
{%  for fn in iface.functions %}
static constexpr Hash k{$iface.name}_{$fn.name}_id = {$fn.id};
{%  endfor %}
{% endfor %}


/// kikass:
/// add compile time tuple of header ids here, so that we can use this service class as 
/// a template and register the ids somewhere if ERPC_NESTED_CALLS_DETECTION
{% for iface in group.interfaces %}
class {$iface.serviceClassName2}
{
public:
//static constexpr std::array IDs {
//    {%  for fn in iface.functions %} k{$iface.name}_{$fn.name}_id {% if not loop.last %},{% endif %} {% endfor -- fn %}
//    };
static constexpr auto IDs = std::make_tuple(
    {%  for fn in iface.functions %} k{$iface.name}_{$fn.name}_id {% if not loop.last %},{% endif %} {% endfor -- fn %}
  );
};
{% endfor -- iface %}


#if defined(__cplusplus)
//extern "C" {
#endif
{% for iface in group.interfaces if iface.isNonExternalInterface == true %}

{$> iface.mlComment}
//! @name {$iface.name}
//@{
{%  for fn in iface.functions if fn.isNonExternalFunction == true %}
{$> fn.mlComment}
namespace service{
{$fn.prototype};{$fn.ilComment}{$loop.addNewLineIfNotLast}
}

//{$fn.prototype2};{$fn.ilComment}{$loop.addNewLineIfNotLast}
namespace remote{
{$fn.prototypeWithClient};{$fn.ilComment}{$loop.addNewLineIfNotLast}
{$fn.prototypeWithId};
}
{%  endfor -- functions %}
//@}{$iface.ilComment}
{% endfor -- iface %}

#if defined(__cplusplus)
//}
#endif
{% endif -- genCommonTypesFile %}

#endif // {$commonGuardMacro}
